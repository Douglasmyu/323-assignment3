<Rat23F> --> <Opt Function Definitions> # <Opt Declaration List> <Statement List> #
Matched Token: ['SEPARATOR', '#'], Lexeme: #
<Opt Declaration List> --> <Declaration List>
<Declaration List> --> <Declaration> ; <Declaration List> | <Declaration> ;
<Declaration> --> <Qualifier> <IDs>
<Qualifier> --> integer
Matched Token: ['KEYWORDS', 'integer'], Lexeme: integer
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'num'], Lexeme: num
Matched Token: ['SEPARATOR', ','], Lexeme: ,
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'threshold'], Lexeme: threshold
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Declaration List> --> <Declaration> ; <Declaration List> | <Declaration> ;
<Declaration> --> <Qualifier> <IDs>
<Qualifier> --> bool
Matched Token: ['KEYWORDS', 'bool'], Lexeme: bool
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'flag'], Lexeme: flag
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Scan>
<Scan> --> get (<IDs>)
Matched Token: ['KEYWORDS', 'get'], Lexeme: get
Matched Token: ['SEPARATOR', '('], Lexeme: (
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'num'], Lexeme: num
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Scan>
<Scan> --> get (<IDs>)
Matched Token: ['KEYWORDS', 'get'], Lexeme: get
Matched Token: ['SEPARATOR', '('], Lexeme: (
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'threshold'], Lexeme: threshold
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <If>
Matched Token: ['KEYWORDS', 'if'], Lexeme: if
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Condition> --> <Expression> <Relop> <Expression>
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'num'], Lexeme: num
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
<Relop> --> >
Matched Token: ['OPERATOR', '>'], Lexeme: >
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'threshold'], Lexeme: threshold
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
<Statement> --> <Compound>
<Compound> --> { <Statement List> }
Matched Token: ['SEPARATOR', '{'], Lexeme: {
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Assign>
<Assign> --> <Identifier> = <Expression> ;
Matched Token: ['IDENTIFIER', 'flag'], Lexeme: flag
Matched Token: ['OPERATOR', '='], Lexeme: =
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> true
Matched Token: ['KEYWORDS', 'true'], Lexeme: true
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <If>
Matched Token: ['KEYWORDS', 'if'], Lexeme: if
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Condition> --> <Expression> <Relop> <Expression>
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'num'], Lexeme: num
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
<Relop> --> >
Matched Token: ['OPERATOR', '>'], Lexeme: >
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'threshold'], Lexeme: threshold
<Term'> --> ε
<Empty> --> ε
Matched Token: ['OPERATOR', '+'], Lexeme: +
<Expression'> --> + <Term> <Expression'>
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Integer>
Matched Token: ['INTEGER', '10'], Lexeme: 10
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
<Statement> --> <Compound>
<Compound> --> { <Statement List> }
Matched Token: ['SEPARATOR', '{'], Lexeme: {
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Print>
<Print> --> put ( <Expression> );
Matched Token: ['KEYWORDS', 'put'], Lexeme: put
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'num'], Lexeme: num
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
Matched Token: ['SEPARATOR', '}'], Lexeme: }
Matched Token: ['KEYWORDS', 'else'], Lexeme: else
<Statement> --> <Compound>
<Compound> --> { <Statement List> }
Matched Token: ['SEPARATOR', '{'], Lexeme: {
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Print>
<Print> --> put ( <Expression> );
Matched Token: ['KEYWORDS', 'put'], Lexeme: put
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'threshold'], Lexeme: threshold
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
Matched Token: ['SEPARATOR', '}'], Lexeme: }
Matched Token: ['KEYWORDS', 'endif'], Lexeme: endif
Matched Token: ['SEPARATOR', '}'], Lexeme: }
Matched Token: ['KEYWORDS', 'else'], Lexeme: else
<Statement> --> <Compound>
<Compound> --> { <Statement List> }
Matched Token: ['SEPARATOR', '{'], Lexeme: {
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Assign>
<Assign> --> <Identifier> = <Expression> ;
Matched Token: ['IDENTIFIER', 'flag'], Lexeme: flag
Matched Token: ['OPERATOR', '='], Lexeme: =
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> false
Matched Token: ['KEYWORDS', 'false'], Lexeme: false
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Print>
<Print> --> put ( <Expression> );
Matched Token: ['KEYWORDS', 'put'], Lexeme: put
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'flag'], Lexeme: flag
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
Matched Token: ['SEPARATOR', '}'], Lexeme: }
Matched Token: ['KEYWORDS', 'endif'], Lexeme: endif
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <While>
<While> --> while ( <Condition> ) <Statement>
Matched Token: ['KEYWORDS', 'while'], Lexeme: while
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Condition> --> <Expression> <Relop> <Expression>
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'num'], Lexeme: num
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
<Relop> --> <=
Matched Token: ['OPERATOR', '<='], Lexeme: <=
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'threshold'], Lexeme: threshold
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
<Statement> --> <Compound>
<Compound> --> { <Statement List> }
Matched Token: ['SEPARATOR', '{'], Lexeme: {
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Print>
<Print> --> put ( <Expression> );
Matched Token: ['KEYWORDS', 'put'], Lexeme: put
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'num'], Lexeme: num
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Assign>
<Assign> --> <Identifier> = <Expression> ;
Matched Token: ['IDENTIFIER', 'num'], Lexeme: num
Matched Token: ['OPERATOR', '='], Lexeme: =
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'num'], Lexeme: num
<Term'> --> ε
<Empty> --> ε
Matched Token: ['OPERATOR', '+'], Lexeme: +
<Expression'> --> + <Term> <Expression'>
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Integer>
Matched Token: ['INTEGER', '1'], Lexeme: 1
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
Matched Token: ['SEPARATOR', '}'], Lexeme: }
Matched Token: ['SEPARATOR', '#'], Lexeme: #
Parsing Complete


ASSEMBLY CODE
   1: PUSHM  7007
   2: PUSHM  7008
   3: PUSHM  7009
   4: PUSHM  7007
   5: PUSHM  7008
   6: PUSHM  7007
   7: GRT    nil
   8: JUMPZ  nil
   9: PUSHM  25
  10: JUMPZ  nil
  11: PUSHM  10
  12: POPM   7009
  13: PUSHM  7007
  14: GRT    nil
  15: JUMPZ  nil
  16: PUSHM  22
  17: PUSHI  10
  18: ADD    nil
  19: JUMPZ  nil
  20: PUSHM  19
  21: STDOUT nil
  22: JUMP   nil
  23: PUSHM  7008
  24: STDOUT nil
  25: JUMP   nil
  26: PUSHM  7009
  27: POPM   7009
  28: PUSHM  7009
  29: STDOUT nil
  30: LABEL  nil
  31: PUSHM  7007
  32: LEQ    nil
  33: JUMPZ  nil
  34: PUSHM  44
  35: JUMPZ  nil
  36: PUSHM  7007
  37: STDOUT nil
  38: PUSHM  7007
  39: PUSHM  7007
  40: PUSHI  1
  41: ADD    nil
  42: POPM   7007
  43: JUMP   30
  44: LABEL  nil


SYMBOL TABlE
Identifier	Memory Location	Type
i		7000		integer
max		7001		integer
sum		7002		integer
low		7003		integer
high		7004		integer
step		7005		integer
convert1x		7006		None
num		7007		integer
threshold		7008		integer
flag		7009		bool
