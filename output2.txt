<Rat23F> --> <Opt Function Definitions> # <Opt Declaration List> <Statement List> #
Matched Token: ['SEPARATOR', '#'], Lexeme: #
<Opt Declaration List> --> <Declaration List>
<Declaration List> --> <Declaration> ; <Declaration List> | <Declaration> ;
<Declaration> --> <Qualifier> <IDs>
<Qualifier> --> integer
Matched Token: ['KEYWORDS', 'integer'], Lexeme: integer
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'low'], Lexeme: low
Matched Token: ['SEPARATOR', ','], Lexeme: ,
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'high'], Lexeme: high
Matched Token: ['SEPARATOR', ','], Lexeme: ,
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'step'], Lexeme: step
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Scan>
<Scan> --> get (<IDs>)
Matched Token: ['KEYWORDS', 'get'], Lexeme: get
Matched Token: ['SEPARATOR', '('], Lexeme: (
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'low'], Lexeme: low
Matched Token: ['SEPARATOR', ','], Lexeme: ,
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'high'], Lexeme: high
Matched Token: ['SEPARATOR', ','], Lexeme: ,
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'step'], Lexeme: step
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <While>
<While> --> while ( <Condition> ) <Statement>
Matched Token: ['KEYWORDS', 'while'], Lexeme: while
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Condition> --> <Expression> <Relop> <Expression>
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'low'], Lexeme: low
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
<Relop> --> <=
Matched Token: ['OPERATOR', '<='], Lexeme: <=
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'high'], Lexeme: high
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
<Statement> --> <Compound>
<Compound> --> { <Statement List> }
Matched Token: ['SEPARATOR', '{'], Lexeme: {
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Print>
<Print> --> put ( <Expression> );
Matched Token: ['KEYWORDS', 'put'], Lexeme: put
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'low'], Lexeme: low
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Print>
<Print> --> put ( <Expression> );
Matched Token: ['KEYWORDS', 'put'], Lexeme: put
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'convert1x'], Lexeme: convert1x
Matched Token: ['SEPARATOR', '('], Lexeme: (
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'low'], Lexeme: low
Matched Token: ['SEPARATOR', ')'], Lexeme: )
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Assign>
<Assign> --> <Identifier> = <Expression> ;
Matched Token: ['IDENTIFIER', 'low'], Lexeme: low
Matched Token: ['OPERATOR', '='], Lexeme: =
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'low'], Lexeme: low
<Term'> --> ε
<Empty> --> ε
Matched Token: ['OPERATOR', '+'], Lexeme: +
<Expression'> --> + <Term> <Expression'>
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'step'], Lexeme: step
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
Matched Token: ['SEPARATOR', '}'], Lexeme: }
Matched Token: ['SEPARATOR', '#'], Lexeme: #
Parsing Complete


ASSEMBLY CODE
   1: PUSHM  7003
   2: PUSHM  7004
   3: PUSHM  7005
   4: PUSHM  7003
   5: PUSHM  7004
   6: PUSHM  7005
   7: LABEL  nil
   8: PUSHM  7003
   9: LEQ    nil
  10: JUMPZ  nil
  11: PUSHM  24
  12: JUMPZ  nil
  13: PUSHM  7003
  14: STDOUT nil
  15: PUSHM  7006
  16: PUSHM  7003
  17: STDOUT nil
  18: PUSHM  7003
  19: PUSHM  7003
  20: PUSHM  7005
  21: ADD    nil
  22: POPM   7003
  23: JUMP   7
  24: LABEL  nil


SYMBOL TABlE
Identifier	Memory Location	Type
i		7000		integer
max		7001		integer
sum		7002		integer
low		7003		integer
high		7004		integer
step		7005		integer
convert1x		7006		None
