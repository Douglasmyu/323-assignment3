<Rat23F> --> <Opt Function Definitions> # <Opt Declaration List> <Statement List> #
Matched Token: ['SEPARATOR', '#'], Lexeme: #
<Opt Declaration List> --> <Declaration List>
<Declaration List> --> <Declaration> ; <Declaration List> | <Declaration> ;
<Declaration> --> <Qualifier> <IDs>
<Qualifier> --> integer
Matched Token: ['KEYWORDS', 'integer'], Lexeme: integer
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'i'], Lexeme: i
Matched Token: ['SEPARATOR', ','], Lexeme: ,
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'max'], Lexeme: max
Matched Token: ['SEPARATOR', ','], Lexeme: ,
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'sum'], Lexeme: sum
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Assign>
<Assign> --> <Identifier> = <Expression> ;
Matched Token: ['IDENTIFIER', 'sum'], Lexeme: sum
Matched Token: ['OPERATOR', '='], Lexeme: =
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Integer>
Matched Token: ['INTEGER', '0'], Lexeme: 0
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Assign>
<Assign> --> <Identifier> = <Expression> ;
Matched Token: ['IDENTIFIER', 'i'], Lexeme: i
Matched Token: ['OPERATOR', '='], Lexeme: =
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Integer>
Matched Token: ['INTEGER', '1'], Lexeme: 1
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Scan>
<Scan> --> get (<IDs>)
Matched Token: ['KEYWORDS', 'get'], Lexeme: get
Matched Token: ['SEPARATOR', '('], Lexeme: (
<IDs> --> <Identifier> | <Identifier>, <IDs>
Matched Token: ['IDENTIFIER', 'max'], Lexeme: max
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <While>
<While> --> while ( <Condition> ) <Statement>
Matched Token: ['KEYWORDS', 'while'], Lexeme: while
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Condition> --> <Expression> <Relop> <Expression>
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'i'], Lexeme: i
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
<Relop> --> <
Matched Token: ['OPERATOR', '<'], Lexeme: <
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'max'], Lexeme: max
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
<Statement> --> <Compound>
<Compound> --> { <Statement List> }
Matched Token: ['SEPARATOR', '{'], Lexeme: {
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Assign>
<Assign> --> <Identifier> = <Expression> ;
Matched Token: ['IDENTIFIER', 'sum'], Lexeme: sum
Matched Token: ['OPERATOR', '='], Lexeme: =
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'sum'], Lexeme: sum
<Term'> --> ε
<Empty> --> ε
Matched Token: ['OPERATOR', '+'], Lexeme: +
<Expression'> --> + <Term> <Expression'>
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'i'], Lexeme: i
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Assign>
<Assign> --> <Identifier> = <Expression> ;
Matched Token: ['IDENTIFIER', 'i'], Lexeme: i
Matched Token: ['OPERATOR', '='], Lexeme: =
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'i'], Lexeme: i
<Term'> --> * <Factor> <Term'>
Matched Token: ['OPERATOR', '*'], Lexeme: *
<Factor> --> <Primary>
<Primary> --> <Integer>
Matched Token: ['INTEGER', '1'], Lexeme: 1
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
Matched Token: ['SEPARATOR', '}'], Lexeme: }
<Statement List> --> <Statement> | <Statement> <Statement List>
<Statement> --> <Print>
<Print> --> put ( <Expression> );
Matched Token: ['KEYWORDS', 'put'], Lexeme: put
Matched Token: ['SEPARATOR', '('], Lexeme: (
<Expression> --> <Term> <Expression'> 
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'sum'], Lexeme: sum
<Term'> --> ε
<Empty> --> ε
Matched Token: ['OPERATOR', '+'], Lexeme: +
<Expression'> --> + <Term> <Expression'>
<Term> --> <Factor> <Term'>
<Factor> --> <Primary>
<Primary> --> <Identifier> | <Primary> --> <Identifier> ( <IDs> )
Matched Token: ['IDENTIFIER', 'max'], Lexeme: max
<Term'> --> ε
<Empty> --> ε
<Expression'> --> ε
<Empty> --> ε
Matched Token: ['SEPARATOR', ')'], Lexeme: )
Matched Token: ['SEPARATOR', ';'], Lexeme: ;
Matched Token: ['SEPARATOR', '#'], Lexeme: #
Parsing Complete
   1: PUSHM  7000
   2: PUSHM  7001
   3: PUSHM  7002
   4: PUSHM  7002
   5: PUSHI  0
   6: POPM   7002
   7: PUSHM  7000
   8: PUSHI  1
   9: POPM   7000
  10: PUSHM  7001
  11: LABEL  nil
  12: PUSHM  7000
  13: LES    nil
  14: JUMPZ  nil
  15: PUSHM  27
  16: PUSHM  7002
  17: PUSHM  7002
  18: PUSHM  7000
  19: ADD    nil
  20: POPM   7002
  21: PUSHM  7000
  22: PUSHM  7000
  23: PUSHI  1
  24: MUL    nil
  25: POPM   7000
  26: JUMP   11
  27: PUSHM  7002
  28: PUSHM  7001
  29: ADD    nil
  30: STDOUT nil
Identifier	Memory Location	Type
i		7000		ID
max		7001		ID
sum		7002		ID
